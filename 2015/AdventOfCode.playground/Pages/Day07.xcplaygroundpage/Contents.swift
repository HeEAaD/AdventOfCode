import Foundation

let path = NSBundle.mainBundle().pathForResource("day07_input", ofType: "txt")
let input = try String(contentsOfFile: path!)

//let input = "123 -> x\n456 -> y\nx AND y -> d\nx OR y -> e\nx LSHIFT 2 -> f\ny RSHIFT 2 -> g\nNOT x -> h\nNOT y -> i"

var instructions:[String] = input.componentsSeparatedByString("\n").sort { (l, r) -> Bool in
    let lOut = l.componentsSeparatedByString(" -> ").last!
    let rOut = r.componentsSeparatedByString(" -> ").last!
    let diff = lOut.characters.count - rOut.characters.count
    if diff < 0 {
        return true
    } else if diff > 0 {
        return false
    }
    return lOut.compare(rOut, options: .LiteralSearch) == .OrderedAscending
}

instructions = instructions.map { s in
    var inp = s.componentsSeparatedByString(" -> ").first!
    let out = s.componentsSeparatedByString(" -> ").last!
    
    inp = inp.stringByReplacingOccurrencesOfString(" OR ", withString:" | ")
    inp = inp.stringByReplacingOccurrencesOfString(" AND ", withString:" & ")
    inp = inp.stringByReplacingOccurrencesOfString(" LSHIFT ", withString:" << ")
    inp = inp.stringByReplacingOccurrencesOfString(" RSHIFT ", withString:" >> ")
    inp = inp.stringByReplacingOccurrencesOfString("NOT ", withString:"~")
   
    var escaped = "let \(out):UInt16 = \(inp)".stringByReplacingOccurrencesOfString("as", withString: "as_")
    escaped = escaped.stringByReplacingOccurrencesOfString("if", withString: "if_")
    escaped = escaped.stringByReplacingOccurrencesOfString("do", withString: "do_")
    escaped = escaped.stringByReplacingOccurrencesOfString("in", withString: "in_")
    escaped = escaped.stringByReplacingOccurrencesOfString("is", withString: "is_")
    return escaped
}

print(instructions.joinWithSeparator("\n"))

// Sample program:
//let x:UInt16 = 123
//let y:UInt16 = 456
//let d:UInt16 = x & y
//let e:UInt16 = x | y
//let f:UInt16 = x << 2
//let g:UInt16 = y >> 2
//let h:UInt16 = ~x
//let i:UInt16 = ~y

// Program:
//let b:UInt16 = 14146
let b:UInt16 = 956
let c:UInt16 = 0
let d:UInt16 = b >> 2
let e:UInt16 = b >> 3
let f:UInt16 = b >> 5
let g:UInt16 = e | f
let h:UInt16 = e & f
let i:UInt16 = ~h
let j:UInt16 = g & i
let k:UInt16 = d | j
let l:UInt16 = d & j
let m:UInt16 = ~l
let n:UInt16 = k & m
let o:UInt16 = b | n
let p:UInt16 = b & n
let q:UInt16 = ~p
let r:UInt16 = o & q
let s:UInt16 = 1 & r
let t:UInt16 = c << 1
let u:UInt16 = t | s
let v:UInt16 = b >> 1
let w:UInt16 = s << 15
let x:UInt16 = v | w
let y:UInt16 = x >> 2
let z:UInt16 = x >> 3
let aa:UInt16 = x >> 5
let ab:UInt16 = z | aa
let ac:UInt16 = z & aa
let ad:UInt16 = ~ac
let ae:UInt16 = ab & ad
let af:UInt16 = y | ae
let ag:UInt16 = y & ae
let ah:UInt16 = ~ag
let ai:UInt16 = af & ah
let aj:UInt16 = x | ai
let ak:UInt16 = x & ai
let al:UInt16 = ~ak
let am:UInt16 = aj & al
let an:UInt16 = 1 & am
let ao:UInt16 = u << 1
let ap:UInt16 = ao | an
let aq:UInt16 = x >> 1
let ar:UInt16 = an << 15
let as_:UInt16 = aq | ar
let at:UInt16 = as_ >> 2
let au:UInt16 = as_ >> 3
let av:UInt16 = as_ >> 5
let aw:UInt16 = au | av
let ax:UInt16 = au & av
let ay:UInt16 = ~ax
let az:UInt16 = aw & ay
let ba:UInt16 = at | az
let bb:UInt16 = at & az
let bc:UInt16 = ~bb
let bd:UInt16 = ba & bc
let be:UInt16 = as_ | bd
let bf:UInt16 = as_ & bd
let bg:UInt16 = ~bf
let bh:UInt16 = be & bg
let bi:UInt16 = 1 & bh
let bj:UInt16 = ap << 1
let bk:UInt16 = bj | bi
let bl:UInt16 = as_ >> 1
let bm:UInt16 = bi << 15
let bn:UInt16 = bl | bm
let bo:UInt16 = bn >> 2
let bp:UInt16 = bn >> 3
let bq:UInt16 = bn >> 5
let br:UInt16 = bp | bq
let bs:UInt16 = bp & bq
let bt:UInt16 = ~bs
let bu:UInt16 = br & bt
let bv:UInt16 = bo | bu
let bw:UInt16 = bo & bu
let bx:UInt16 = ~bw
let by:UInt16 = bv & bx
let bz:UInt16 = bn | by
let ca:UInt16 = bn & by
let cb:UInt16 = ~ca
let cc:UInt16 = bz & cb
let cd:UInt16 = 1 & cc
let ce:UInt16 = bk << 1
let cf:UInt16 = ce | cd
let cg:UInt16 = bn >> 1
let ch:UInt16 = cd << 15
let ci:UInt16 = cg | ch
let cj:UInt16 = ci >> 2
let ck:UInt16 = ci >> 3
let cl:UInt16 = ci >> 5
let cm:UInt16 = ck | cl
let cn:UInt16 = ck & cl
let co:UInt16 = ~cn
let cp:UInt16 = cm & co
let cq:UInt16 = cj | cp
let cr:UInt16 = cj & cp
let cs:UInt16 = ~cr
let ct:UInt16 = cq & cs
let cu:UInt16 = ci | ct
let cv:UInt16 = ci & ct
let cw:UInt16 = ~cv
let cx:UInt16 = cu & cw
let cy:UInt16 = 1 & cx
let cz:UInt16 = cf << 1
let da:UInt16 = cz | cy
let db:UInt16 = ci >> 1
let dc:UInt16 = cy << 15
let dd:UInt16 = db | dc
let de:UInt16 = dd >> 2
let df:UInt16 = dd >> 3
let dg:UInt16 = dd >> 5
let dh:UInt16 = df | dg
let di:UInt16 = df & dg
let dj:UInt16 = ~di
let dk:UInt16 = dh & dj
let dl:UInt16 = de | dk
let dm:UInt16 = de & dk
let dn:UInt16 = ~dm
let do_:UInt16 = dl & dn
let dp:UInt16 = dd | do_
let dq:UInt16 = dd & do_
let dr:UInt16 = ~dq
let ds:UInt16 = dp & dr
let dt:UInt16 = 1 & ds
let du:UInt16 = da << 1
let dv:UInt16 = du | dt
let dw:UInt16 = dd >> 1
let dx:UInt16 = dt << 15
let dy:UInt16 = dw | dx
let dz:UInt16 = dy >> 2
let ea:UInt16 = dy >> 3
let eb:UInt16 = dy >> 5
let ec:UInt16 = ea | eb
let ed:UInt16 = ea & eb
let ee:UInt16 = ~ed
let ef:UInt16 = ec & ee
let eg:UInt16 = dz | ef
let eh:UInt16 = dz & ef
let ei:UInt16 = ~eh
let ej:UInt16 = eg & ei
let ek:UInt16 = dy | ej
let el:UInt16 = dy & ej
let em:UInt16 = ~el
let en:UInt16 = ek & em
let eo:UInt16 = 1 & en
let ep:UInt16 = dv << 1
let eq:UInt16 = ep | eo
let er:UInt16 = dy >> 1
let es:UInt16 = eo << 15
let et:UInt16 = er | es
let eu:UInt16 = et >> 2
let ev:UInt16 = et >> 3
let ew:UInt16 = et >> 5
let ex:UInt16 = ev | ew
let ey:UInt16 = ev & ew
let ez:UInt16 = ~ey
let fa:UInt16 = ex & ez
let fb:UInt16 = eu | fa
let fc:UInt16 = eu & fa
let fd:UInt16 = ~fc
let fe:UInt16 = fb & fd
let ff:UInt16 = et | fe
let fg:UInt16 = et & fe
let fh:UInt16 = ~fg
let fi:UInt16 = ff & fh
let fj:UInt16 = 1 & fi
let fk:UInt16 = eq << 1
let fl:UInt16 = fk | fj
let fm:UInt16 = et >> 1
let fn:UInt16 = fj << 15
let fo:UInt16 = fm | fn
let fp:UInt16 = fo >> 2
let fq:UInt16 = fo >> 3
let fr:UInt16 = fo >> 5
let fs:UInt16 = fq | fr
let ft:UInt16 = fq & fr
let fu:UInt16 = ~ft
let fv:UInt16 = fs & fu
let fw:UInt16 = fp | fv
let fx:UInt16 = fp & fv
let fy:UInt16 = ~fx
let fz:UInt16 = fw & fy
let ga:UInt16 = fo | fz
let gb:UInt16 = fo & fz
let gc:UInt16 = ~gb
let gd:UInt16 = ga & gc
let ge:UInt16 = 1 & gd
let gf:UInt16 = fl << 1
let gg:UInt16 = gf | ge
let gh:UInt16 = fo >> 1
let gi:UInt16 = ge << 15
let gj:UInt16 = gh | gi
let gk:UInt16 = gj >> 2
let gl:UInt16 = gj >> 3
let gm:UInt16 = gj >> 5
let gn:UInt16 = gl | gm
let go:UInt16 = gl & gm
let gp:UInt16 = ~go
let gq:UInt16 = gn & gp
let gr:UInt16 = gk | gq
let gs:UInt16 = gk & gq
let gt:UInt16 = ~gs
let gu:UInt16 = gr & gt
let gv:UInt16 = gj | gu
let gw:UInt16 = gj & gu
let gx:UInt16 = ~gw
let gy:UInt16 = gv & gx
let gz:UInt16 = 1 & gy
let ha:UInt16 = gg << 1
let hb:UInt16 = ha | gz
let hc:UInt16 = gj >> 1
let hd:UInt16 = gz << 15
let he:UInt16 = hc | hd
let hf:UInt16 = he >> 2
let hg:UInt16 = he >> 3
let hh:UInt16 = he >> 5
let hi:UInt16 = hg | hh
let hj:UInt16 = hg & hh
let hk:UInt16 = ~hj
let hl:UInt16 = hi & hk
let hm:UInt16 = hf | hl
let hn:UInt16 = hf & hl
let ho:UInt16 = ~hn
let hp:UInt16 = hm & ho
let hq:UInt16 = he | hp
let hr:UInt16 = he & hp
let hs:UInt16 = ~hr
let ht:UInt16 = hq & hs
let hu:UInt16 = 1 & ht
let hv:UInt16 = hb << 1
let hw:UInt16 = hv | hu
let hx:UInt16 = he >> 1
let hy:UInt16 = hu << 15
let hz:UInt16 = hx | hy
let ia:UInt16 = hz >> 2
let ib:UInt16 = hz >> 3
let ic:UInt16 = hz >> 5
let id:UInt16 = ib | ic
let ie:UInt16 = ib & ic
let if_:UInt16 = ~ie
let ig:UInt16 = id & if_
let ih:UInt16 = ia | ig
let ii:UInt16 = ia & ig
let ij:UInt16 = ~ii
let ik:UInt16 = ih & ij
let il:UInt16 = hz | ik
let im:UInt16 = hz & ik
let in_:UInt16 = ~im
let io:UInt16 = il & in_
let ip:UInt16 = 1 & io
let iq:UInt16 = hw << 1
let ir:UInt16 = iq | ip
let is_:UInt16 = hz >> 1
let it:UInt16 = ip << 15
let iu:UInt16 = is_ | it
let iv:UInt16 = iu >> 2
let iw:UInt16 = iu >> 3
let ix:UInt16 = iu >> 5
let iy:UInt16 = iw | ix
let iz:UInt16 = iw & ix
let ja:UInt16 = ~iz
let jb:UInt16 = iy & ja
let jc:UInt16 = iv | jb
let jd:UInt16 = iv & jb
let je:UInt16 = ~jd
let jf:UInt16 = jc & je
let jg:UInt16 = iu | jf
let jh:UInt16 = iu & jf
let ji:UInt16 = ~jh
let jj:UInt16 = jg & ji
let jk:UInt16 = 1 & jj
let jl:UInt16 = ir << 1
let jm:UInt16 = jl | jk
let jn:UInt16 = iu >> 1
let jo:UInt16 = jk << 15
let jp:UInt16 = jn | jo
let jq:UInt16 = jp >> 2
let jr:UInt16 = jp >> 3
let js:UInt16 = jp >> 5
let jt:UInt16 = jr | js
let ju:UInt16 = jr & js
let jv:UInt16 = ~ju
let jw:UInt16 = jt & jv
let jx:UInt16 = jq | jw
let jy:UInt16 = jq & jw
let jz:UInt16 = ~jy
let ka:UInt16 = jx & jz
let kb:UInt16 = jp | ka
let kc:UInt16 = jp & ka
let kd:UInt16 = ~kc
let ke:UInt16 = kb & kd
let kf:UInt16 = 1 & ke
let kg:UInt16 = jm << 1
let kh:UInt16 = kg | kf
let ki:UInt16 = jp >> 1
let kj:UInt16 = kf << 15
let kk:UInt16 = ki | kj
let kl:UInt16 = kk >> 2
let km:UInt16 = kk >> 3
let kn:UInt16 = kk >> 5
let ko:UInt16 = km | kn
let kp:UInt16 = km & kn
let kq:UInt16 = ~kp
let kr:UInt16 = ko & kq
let ks:UInt16 = kl | kr
let kt:UInt16 = kl & kr
let ku:UInt16 = ~kt
let kv:UInt16 = ks & ku
let kw:UInt16 = kk | kv
let kx:UInt16 = kk & kv
let ky:UInt16 = ~kx
let kz:UInt16 = kw & ky
let la:UInt16 = 1 & kz
let lb:UInt16 = kh << 1
let lc:UInt16 = lb | la
let ld:UInt16 = kk >> 1
let le:UInt16 = la << 15
let lf:UInt16 = ld | le
let lg:UInt16 = lf >> 2
let lh:UInt16 = lf >> 3
let li:UInt16 = lf >> 5
let lj:UInt16 = lh | li
let lk:UInt16 = lh & li
let ll:UInt16 = ~lk
let lm:UInt16 = lj & ll
let ln:UInt16 = lg | lm
let lo:UInt16 = lg & lm
let lp:UInt16 = ~lo
let lq:UInt16 = ln & lp
let lr:UInt16 = lf | lq
let ls:UInt16 = lf & lq
let lt:UInt16 = ~ls
let lu:UInt16 = lr & lt
let lv:UInt16 = 1 & lu
let lw:UInt16 = lc << 1
let lx:UInt16 = lw | lv
let ly:UInt16 = lf >> 1
let lz:UInt16 = lv << 15
let ma:UInt16 = ly | lz
let a:UInt16 = lx // Task1: 956, Task2: 40149
